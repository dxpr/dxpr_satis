name: CI/CD

on:
  push:
  # to trigger manually with webhook
  # curl -X POST https://api.github.com/repos/:owner/:repo/dispatches \
  # -H 'Accept: application/vnd.github.everest-preview+json' \
  # -H 'Authorization: token TOKEN_VALUE_HERE' \
  # --data '{"event_type":"exec-main","client_payload":{}}'
  repository_dispatch:
    types: [exec-main]

env:
  # env vars to build
  RSA_PRIVATE_KEY_BASE64: ${{ secrets.RSA_PRIVATE_KEY_BASE64 }}
  RSA_PUBLIC_KEY_BASE64: ${{ secrets.RSA_PUBLIC_KEY_BASE64 }}
  GH_PAT: ${{ secrets.GH_PAT }}
  # env vars to publish
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
  DISTRIBUTION_ID: ${{ secrets.DISTRIBUTION_ID }}

jobs:

  build-publish:
    runs-on: ubuntu-20.04

    steps:

    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.6.0
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v2

    - name: Set up
      run: |
        # ssh keys setup
        mkdir -p .ssh
        echo "$RSA_PRIVATE_KEY_BASE64" | base64 --decode > .ssh/repository_rsa
        chmod 400 .ssh/repository_rsa
        echo "$RSA_PUBLIC_KEY_BASE64" | base64 --decode > .ssh/repository_rsa.pub
        docker-compose run build bash -c "ssh -oStrictHostKeyChecking=accept-new -T -ai ~/.ssh/repository_rsa git@github.com" || true
        # GH_PAT setup
        echo "rm -rf .composer" && rm -rf .composer
        echo "mkdir -p .composer" && mkdir -p .composer
        cat <<EOF >.composer/auth.json
        {
          "github-oauth": {
              "github.com": "$GH_PAT"
          }
        }
        EOF
        echo ".composer/auth.json is created"
      if: env.RSA_PRIVATE_KEY_BASE64 != '' && env.RSA_PUBLIC_KEY_BASE64 != '' && env.GH_PAT != ''

    - name: s3-sync-back
      run: |
        docker-compose run --rm s3-sync-back
      if: env.RSA_PRIVATE_KEY_BASE64 != '' && env.RSA_PUBLIC_KEY_BASE64 != '' && env.GH_PAT != ''

    - name: Build
      run: |
        docker-compose run --rm build
      if: env.RSA_PRIVATE_KEY_BASE64 != '' && env.RSA_PUBLIC_KEY_BASE64 != '' && env.GH_PAT != ''

    - name: Publish
      run: |
        docker-compose run --rm publish
      if: env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_BUCKET != '' && github.ref == 'refs/heads/8'

    - name: Invalidate CloudFront Cache
      run: |
        # docker-compose works now
        docker-compose run --rm invalidate-cache
        # so we don't use aws-cli from the github action runner
        # aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths /$DRUPAL_ENDPOINT/packages.json /$DRUPAL_ENDPOINT/index.html /$DRUPAL_ENDPOINT/p2/* /$DRUPAL_ENDPOINT/include/*
      if: env.DISTRIBUTION_ID != '' && github.ref == 'refs/heads/8'
      env:
        DRUPAL_ENDPOINT: 8
        AWS_EC2_METADATA_DISABLED: true # see: https://github.com/aws/aws-cli/issues/5262#issuecomment-705832151

  trigger-lightning_dxpr_project-exec-composer-install:
    needs: [build-publish]
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    if: github.ref == 'refs/heads/8'
    steps:
    - name: Configure for the trigger
      id: trigger-config
      run: |
        PAYLOAD="{\
        \"repository\": {\"GITHUB_REF\": \"$GITHUB_REF\", \"GITHUB_SHA\": \"$GITHUB_SHA\"}\
        }"
        echo "::set-output name=payload::$PAYLOAD"

    - uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.GH_PAT }}
        event-type: exec-composer-install
        client-payload: ${{ steps.trigger-config.outputs.payload }}
        repository: ${{ github.repository_owner }}/lightning_dxpr_project
